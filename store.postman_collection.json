{
	"info": {
		"_postman_id": "d378ace1-08f6-45f3-9807-00767a03baa0",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22833504"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "List products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"properties\":{\r",
									"        \"name\": { \"type\" : \"string\" },\r",
									"        \"price\": { \"type\" : \"number\" },\r",
									"        \"sku\": { \"type\" : \"number\" },\r",
									"        \"description\": { \"type\" : \"string\" },\r",
									"        \"id\": { \"type\" : \"number\" },\r",
									"    }\r",
									"    \r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(1);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"properties\":{\r",
									"        \"name\": { \"type\" : \"string\" },\r",
									"        \"price\": { \"type\" : \"number\" },\r",
									"        \"sku\": { \"type\" : \"number\" },\r",
									"        \"description\": { \"type\" : \"string\" },\r",
									"        \"id\": { \"type\" : \"number\" },\r",
									"    }\r",
									"    \r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"pm.test(\"Response eql body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql({\r",
									"    \"name\": \"orange\",\r",
									"    \"price\": 42,\r",
									"    \"sku\": 1232421424324,\r",
									"    \"description\": \"not yellow\",\r",
									"    \"id\": jsonData.id\r",
									"});\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"    \r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"properties\":{\r",
									"        \"name\": { \"type\" : \"string\" },\r",
									"        \"price\": { \"type\" : \"number\" },\r",
									"        \"sku\": { \"type\" : \"number\" },\r",
									"        \"description\": { \"type\" : \"string\" },\r",
									"        \"id\": { \"type\" : \"number\" },\r",
									"    }\r",
									"    \r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"orange\",\r\n    \"price\": 42,\r\n    \"sku\": 1232421424324,\r\n    \"description\": \"not yellow\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response eql body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.eql({\r",
									"    \"id\": 4,\r",
									"    \"name\": \"banadasdana\",\r",
									"    \"price\": 155,\r",
									"    \"sku\": 123321123,\r",
									"    \"description\": \"changed description\"\r",
									"});\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"properties\":{\r",
									"        \"name\": { \"type\" : \"string\" },\r",
									"        \"price\": { \"type\" : \"number\" },\r",
									"        \"sku\": { \"type\" : \"number\" },\r",
									"        \"description\": { \"type\" : \"string\" },\r",
									"        \"id\": { \"type\" : \"number\" },\r",
									"    }\r",
									"    \r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"banadasdana\",\r\n    \"price\": 155,\r\n    \"sku\": 123321123,\r\n    \"description\": \"changed description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Correct id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(4);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"properties\":{\r",
									"        \"name\": { \"type\" : \"string\" },\r",
									"        \"price\": { \"type\" : \"number\" },\r",
									"        \"sku\": { \"type\" : \"number\" },\r",
									"        \"description\": { \"type\" : \"string\" },\r",
									"        \"id\": { \"type\" : \"number\" },\r",
									"    }\r",
									"    \r",
									"};\r",
									"pm.test('Schema is valid', function() {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "4"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}